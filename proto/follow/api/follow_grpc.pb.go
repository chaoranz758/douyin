// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: follow/api/follow.proto

package api

import (
	context "context"
	request "douyin/proto/follow/request"
	response "douyin/proto/follow/response"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FollowClient is the client API for Follow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowClient interface {
	FollowUser(ctx context.Context, in *request.DouyinRelationActionRequest, opts ...grpc.CallOption) (*response.DouyinRelationActionResponse, error)
	GetFollowList(ctx context.Context, in *request.DouyinRelationFollowListRequest, opts ...grpc.CallOption) (*response.DouyinRelationFollowListResponse, error)
	GetFollowerList(ctx context.Context, in *request.DouyinRelationFollowerListRequest, opts ...grpc.CallOption) (*response.DouyinRelationFollowerListResponse, error)
	GetFriendList(ctx context.Context, in *request.DouyinRelationFriendListRequest, opts ...grpc.CallOption) (*response.DouyinRelationFriendListResponse, error)
	GetFollowFollowerIdList(ctx context.Context, in *request.DouyinGetFollowFollowerIdListRequest, opts ...grpc.CallOption) (*response.DouyinGetFollowFollowerIdListResponse, error)
	GetFollowFollower(ctx context.Context, in *request.DouyinFollowFollowerCountRequest, opts ...grpc.CallOption) (*response.DouyinFollowFollowerCountResponse, error)
	GetFollowFollowerList(ctx context.Context, in *request.DouyinFollowFollowerListCountRequest, opts ...grpc.CallOption) (*response.DouyinFollowFollowerListCountResponse, error)
	GetFollowInfo(ctx context.Context, in *request.DouyinGetFollowRequest, opts ...grpc.CallOption) (*response.DouyinGetFollowResponse, error)
	GetFollowInfoList(ctx context.Context, in *request.DouyinGetFollowListRequest, opts ...grpc.CallOption) (*response.DouyinGetFollowListResponse, error)
}

type followClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowClient(cc grpc.ClientConnInterface) FollowClient {
	return &followClient{cc}
}

func (c *followClient) FollowUser(ctx context.Context, in *request.DouyinRelationActionRequest, opts ...grpc.CallOption) (*response.DouyinRelationActionResponse, error) {
	out := new(response.DouyinRelationActionResponse)
	err := c.cc.Invoke(ctx, "/api.Follow/FollowUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) GetFollowList(ctx context.Context, in *request.DouyinRelationFollowListRequest, opts ...grpc.CallOption) (*response.DouyinRelationFollowListResponse, error) {
	out := new(response.DouyinRelationFollowListResponse)
	err := c.cc.Invoke(ctx, "/api.Follow/GetFollowList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) GetFollowerList(ctx context.Context, in *request.DouyinRelationFollowerListRequest, opts ...grpc.CallOption) (*response.DouyinRelationFollowerListResponse, error) {
	out := new(response.DouyinRelationFollowerListResponse)
	err := c.cc.Invoke(ctx, "/api.Follow/GetFollowerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) GetFriendList(ctx context.Context, in *request.DouyinRelationFriendListRequest, opts ...grpc.CallOption) (*response.DouyinRelationFriendListResponse, error) {
	out := new(response.DouyinRelationFriendListResponse)
	err := c.cc.Invoke(ctx, "/api.Follow/GetFriendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) GetFollowFollowerIdList(ctx context.Context, in *request.DouyinGetFollowFollowerIdListRequest, opts ...grpc.CallOption) (*response.DouyinGetFollowFollowerIdListResponse, error) {
	out := new(response.DouyinGetFollowFollowerIdListResponse)
	err := c.cc.Invoke(ctx, "/api.Follow/GetFollowFollowerIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) GetFollowFollower(ctx context.Context, in *request.DouyinFollowFollowerCountRequest, opts ...grpc.CallOption) (*response.DouyinFollowFollowerCountResponse, error) {
	out := new(response.DouyinFollowFollowerCountResponse)
	err := c.cc.Invoke(ctx, "/api.Follow/GetFollowFollower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) GetFollowFollowerList(ctx context.Context, in *request.DouyinFollowFollowerListCountRequest, opts ...grpc.CallOption) (*response.DouyinFollowFollowerListCountResponse, error) {
	out := new(response.DouyinFollowFollowerListCountResponse)
	err := c.cc.Invoke(ctx, "/api.Follow/GetFollowFollowerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) GetFollowInfo(ctx context.Context, in *request.DouyinGetFollowRequest, opts ...grpc.CallOption) (*response.DouyinGetFollowResponse, error) {
	out := new(response.DouyinGetFollowResponse)
	err := c.cc.Invoke(ctx, "/api.Follow/GetFollowInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) GetFollowInfoList(ctx context.Context, in *request.DouyinGetFollowListRequest, opts ...grpc.CallOption) (*response.DouyinGetFollowListResponse, error) {
	out := new(response.DouyinGetFollowListResponse)
	err := c.cc.Invoke(ctx, "/api.Follow/GetFollowInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowServer is the server API for Follow service.
// All implementations must embed UnimplementedFollowServer
// for forward compatibility
type FollowServer interface {
	FollowUser(context.Context, *request.DouyinRelationActionRequest) (*response.DouyinRelationActionResponse, error)
	GetFollowList(context.Context, *request.DouyinRelationFollowListRequest) (*response.DouyinRelationFollowListResponse, error)
	GetFollowerList(context.Context, *request.DouyinRelationFollowerListRequest) (*response.DouyinRelationFollowerListResponse, error)
	GetFriendList(context.Context, *request.DouyinRelationFriendListRequest) (*response.DouyinRelationFriendListResponse, error)
	GetFollowFollowerIdList(context.Context, *request.DouyinGetFollowFollowerIdListRequest) (*response.DouyinGetFollowFollowerIdListResponse, error)
	GetFollowFollower(context.Context, *request.DouyinFollowFollowerCountRequest) (*response.DouyinFollowFollowerCountResponse, error)
	GetFollowFollowerList(context.Context, *request.DouyinFollowFollowerListCountRequest) (*response.DouyinFollowFollowerListCountResponse, error)
	GetFollowInfo(context.Context, *request.DouyinGetFollowRequest) (*response.DouyinGetFollowResponse, error)
	GetFollowInfoList(context.Context, *request.DouyinGetFollowListRequest) (*response.DouyinGetFollowListResponse, error)
	mustEmbedUnimplementedFollowServer()
}

// UnimplementedFollowServer must be embedded to have forward compatible implementations.
type UnimplementedFollowServer struct {
}

func (UnimplementedFollowServer) FollowUser(context.Context, *request.DouyinRelationActionRequest) (*response.DouyinRelationActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedFollowServer) GetFollowList(context.Context, *request.DouyinRelationFollowListRequest) (*response.DouyinRelationFollowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowList not implemented")
}
func (UnimplementedFollowServer) GetFollowerList(context.Context, *request.DouyinRelationFollowerListRequest) (*response.DouyinRelationFollowerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowerList not implemented")
}
func (UnimplementedFollowServer) GetFriendList(context.Context, *request.DouyinRelationFriendListRequest) (*response.DouyinRelationFriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendList not implemented")
}
func (UnimplementedFollowServer) GetFollowFollowerIdList(context.Context, *request.DouyinGetFollowFollowerIdListRequest) (*response.DouyinGetFollowFollowerIdListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowFollowerIdList not implemented")
}
func (UnimplementedFollowServer) GetFollowFollower(context.Context, *request.DouyinFollowFollowerCountRequest) (*response.DouyinFollowFollowerCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowFollower not implemented")
}
func (UnimplementedFollowServer) GetFollowFollowerList(context.Context, *request.DouyinFollowFollowerListCountRequest) (*response.DouyinFollowFollowerListCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowFollowerList not implemented")
}
func (UnimplementedFollowServer) GetFollowInfo(context.Context, *request.DouyinGetFollowRequest) (*response.DouyinGetFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowInfo not implemented")
}
func (UnimplementedFollowServer) GetFollowInfoList(context.Context, *request.DouyinGetFollowListRequest) (*response.DouyinGetFollowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowInfoList not implemented")
}
func (UnimplementedFollowServer) mustEmbedUnimplementedFollowServer() {}

// UnsafeFollowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowServer will
// result in compilation errors.
type UnsafeFollowServer interface {
	mustEmbedUnimplementedFollowServer()
}

func RegisterFollowServer(s grpc.ServiceRegistrar, srv FollowServer) {
	s.RegisterService(&Follow_ServiceDesc, srv)
}

func _Follow_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DouyinRelationActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Follow/FollowUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).FollowUser(ctx, req.(*request.DouyinRelationActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_GetFollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DouyinRelationFollowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).GetFollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Follow/GetFollowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).GetFollowList(ctx, req.(*request.DouyinRelationFollowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_GetFollowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DouyinRelationFollowerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).GetFollowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Follow/GetFollowerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).GetFollowerList(ctx, req.(*request.DouyinRelationFollowerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DouyinRelationFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).GetFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Follow/GetFriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).GetFriendList(ctx, req.(*request.DouyinRelationFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_GetFollowFollowerIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DouyinGetFollowFollowerIdListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).GetFollowFollowerIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Follow/GetFollowFollowerIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).GetFollowFollowerIdList(ctx, req.(*request.DouyinGetFollowFollowerIdListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_GetFollowFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DouyinFollowFollowerCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).GetFollowFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Follow/GetFollowFollower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).GetFollowFollower(ctx, req.(*request.DouyinFollowFollowerCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_GetFollowFollowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DouyinFollowFollowerListCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).GetFollowFollowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Follow/GetFollowFollowerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).GetFollowFollowerList(ctx, req.(*request.DouyinFollowFollowerListCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_GetFollowInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DouyinGetFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).GetFollowInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Follow/GetFollowInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).GetFollowInfo(ctx, req.(*request.DouyinGetFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_GetFollowInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DouyinGetFollowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).GetFollowInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Follow/GetFollowInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).GetFollowInfoList(ctx, req.(*request.DouyinGetFollowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Follow_ServiceDesc is the grpc.ServiceDesc for Follow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Follow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Follow",
	HandlerType: (*FollowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FollowUser",
			Handler:    _Follow_FollowUser_Handler,
		},
		{
			MethodName: "GetFollowList",
			Handler:    _Follow_GetFollowList_Handler,
		},
		{
			MethodName: "GetFollowerList",
			Handler:    _Follow_GetFollowerList_Handler,
		},
		{
			MethodName: "GetFriendList",
			Handler:    _Follow_GetFriendList_Handler,
		},
		{
			MethodName: "GetFollowFollowerIdList",
			Handler:    _Follow_GetFollowFollowerIdList_Handler,
		},
		{
			MethodName: "GetFollowFollower",
			Handler:    _Follow_GetFollowFollower_Handler,
		},
		{
			MethodName: "GetFollowFollowerList",
			Handler:    _Follow_GetFollowFollowerList_Handler,
		},
		{
			MethodName: "GetFollowInfo",
			Handler:    _Follow_GetFollowInfo_Handler,
		},
		{
			MethodName: "GetFollowInfoList",
			Handler:    _Follow_GetFollowInfoList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "follow/api/follow.proto",
}
