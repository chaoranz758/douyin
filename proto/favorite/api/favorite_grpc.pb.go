// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: favorite/api/favorite.proto

package api

import (
	context "context"
	request "douyin/proto/favorite/request"
	response "douyin/proto/favorite/response"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FavoriteClient is the client API for Favorite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FavoriteClient interface {
	FavoriteVideo(ctx context.Context, in *request.DouyinFavoriteActionRequest, opts ...grpc.CallOption) (*response.DouyinFavoriteActionResponse, error)
	GetFavoriteVideoList(ctx context.Context, in *request.DouyinFavoriteListRequest, opts ...grpc.CallOption) (*response.DouyinFavoriteListResponse, error)
	GetUserFavoriteVideoIdList(ctx context.Context, in *request.DouyinFavoriteIdListRequest, opts ...grpc.CallOption) (*response.DouyinFavoriteIdListResponse, error)
	GetUserListFavoriteVideoIdList(ctx context.Context, in *request.DouyinFavoriteListIdListRequest, opts ...grpc.CallOption) (*response.DouyinFavoriteListIdListResponse, error)
	GetUserFavoritedCount(ctx context.Context, in *request.DouyinGetUserFavoritedCountRequest, opts ...grpc.CallOption) (*response.DouyinGetUserFavoritedCountResponse, error)
	GetFavoriteCount(ctx context.Context, in *request.DouyinFavoriteCountRequest, opts ...grpc.CallOption) (*response.DouyinFavoriteCountResponse, error)
}

type favoriteClient struct {
	cc grpc.ClientConnInterface
}

func NewFavoriteClient(cc grpc.ClientConnInterface) FavoriteClient {
	return &favoriteClient{cc}
}

func (c *favoriteClient) FavoriteVideo(ctx context.Context, in *request.DouyinFavoriteActionRequest, opts ...grpc.CallOption) (*response.DouyinFavoriteActionResponse, error) {
	out := new(response.DouyinFavoriteActionResponse)
	err := c.cc.Invoke(ctx, "/api.Favorite/FavoriteVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteClient) GetFavoriteVideoList(ctx context.Context, in *request.DouyinFavoriteListRequest, opts ...grpc.CallOption) (*response.DouyinFavoriteListResponse, error) {
	out := new(response.DouyinFavoriteListResponse)
	err := c.cc.Invoke(ctx, "/api.Favorite/GetFavoriteVideoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteClient) GetUserFavoriteVideoIdList(ctx context.Context, in *request.DouyinFavoriteIdListRequest, opts ...grpc.CallOption) (*response.DouyinFavoriteIdListResponse, error) {
	out := new(response.DouyinFavoriteIdListResponse)
	err := c.cc.Invoke(ctx, "/api.Favorite/GetUserFavoriteVideoIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteClient) GetUserListFavoriteVideoIdList(ctx context.Context, in *request.DouyinFavoriteListIdListRequest, opts ...grpc.CallOption) (*response.DouyinFavoriteListIdListResponse, error) {
	out := new(response.DouyinFavoriteListIdListResponse)
	err := c.cc.Invoke(ctx, "/api.Favorite/GetUserListFavoriteVideoIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteClient) GetUserFavoritedCount(ctx context.Context, in *request.DouyinGetUserFavoritedCountRequest, opts ...grpc.CallOption) (*response.DouyinGetUserFavoritedCountResponse, error) {
	out := new(response.DouyinGetUserFavoritedCountResponse)
	err := c.cc.Invoke(ctx, "/api.Favorite/GetUserFavoritedCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteClient) GetFavoriteCount(ctx context.Context, in *request.DouyinFavoriteCountRequest, opts ...grpc.CallOption) (*response.DouyinFavoriteCountResponse, error) {
	out := new(response.DouyinFavoriteCountResponse)
	err := c.cc.Invoke(ctx, "/api.Favorite/GetFavoriteCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FavoriteServer is the server API for Favorite service.
// All implementations must embed UnimplementedFavoriteServer
// for forward compatibility
type FavoriteServer interface {
	FavoriteVideo(context.Context, *request.DouyinFavoriteActionRequest) (*response.DouyinFavoriteActionResponse, error)
	GetFavoriteVideoList(context.Context, *request.DouyinFavoriteListRequest) (*response.DouyinFavoriteListResponse, error)
	GetUserFavoriteVideoIdList(context.Context, *request.DouyinFavoriteIdListRequest) (*response.DouyinFavoriteIdListResponse, error)
	GetUserListFavoriteVideoIdList(context.Context, *request.DouyinFavoriteListIdListRequest) (*response.DouyinFavoriteListIdListResponse, error)
	GetUserFavoritedCount(context.Context, *request.DouyinGetUserFavoritedCountRequest) (*response.DouyinGetUserFavoritedCountResponse, error)
	GetFavoriteCount(context.Context, *request.DouyinFavoriteCountRequest) (*response.DouyinFavoriteCountResponse, error)
	mustEmbedUnimplementedFavoriteServer()
}

// UnimplementedFavoriteServer must be embedded to have forward compatible implementations.
type UnimplementedFavoriteServer struct {
}

func (UnimplementedFavoriteServer) FavoriteVideo(context.Context, *request.DouyinFavoriteActionRequest) (*response.DouyinFavoriteActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteVideo not implemented")
}
func (UnimplementedFavoriteServer) GetFavoriteVideoList(context.Context, *request.DouyinFavoriteListRequest) (*response.DouyinFavoriteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteVideoList not implemented")
}
func (UnimplementedFavoriteServer) GetUserFavoriteVideoIdList(context.Context, *request.DouyinFavoriteIdListRequest) (*response.DouyinFavoriteIdListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFavoriteVideoIdList not implemented")
}
func (UnimplementedFavoriteServer) GetUserListFavoriteVideoIdList(context.Context, *request.DouyinFavoriteListIdListRequest) (*response.DouyinFavoriteListIdListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserListFavoriteVideoIdList not implemented")
}
func (UnimplementedFavoriteServer) GetUserFavoritedCount(context.Context, *request.DouyinGetUserFavoritedCountRequest) (*response.DouyinGetUserFavoritedCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFavoritedCount not implemented")
}
func (UnimplementedFavoriteServer) GetFavoriteCount(context.Context, *request.DouyinFavoriteCountRequest) (*response.DouyinFavoriteCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteCount not implemented")
}
func (UnimplementedFavoriteServer) mustEmbedUnimplementedFavoriteServer() {}

// UnsafeFavoriteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FavoriteServer will
// result in compilation errors.
type UnsafeFavoriteServer interface {
	mustEmbedUnimplementedFavoriteServer()
}

func RegisterFavoriteServer(s grpc.ServiceRegistrar, srv FavoriteServer) {
	s.RegisterService(&Favorite_ServiceDesc, srv)
}

func _Favorite_FavoriteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DouyinFavoriteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServer).FavoriteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Favorite/FavoriteVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServer).FavoriteVideo(ctx, req.(*request.DouyinFavoriteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Favorite_GetFavoriteVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DouyinFavoriteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServer).GetFavoriteVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Favorite/GetFavoriteVideoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServer).GetFavoriteVideoList(ctx, req.(*request.DouyinFavoriteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Favorite_GetUserFavoriteVideoIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DouyinFavoriteIdListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServer).GetUserFavoriteVideoIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Favorite/GetUserFavoriteVideoIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServer).GetUserFavoriteVideoIdList(ctx, req.(*request.DouyinFavoriteIdListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Favorite_GetUserListFavoriteVideoIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DouyinFavoriteListIdListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServer).GetUserListFavoriteVideoIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Favorite/GetUserListFavoriteVideoIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServer).GetUserListFavoriteVideoIdList(ctx, req.(*request.DouyinFavoriteListIdListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Favorite_GetUserFavoritedCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DouyinGetUserFavoritedCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServer).GetUserFavoritedCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Favorite/GetUserFavoritedCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServer).GetUserFavoritedCount(ctx, req.(*request.DouyinGetUserFavoritedCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Favorite_GetFavoriteCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DouyinFavoriteCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServer).GetFavoriteCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Favorite/GetFavoriteCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServer).GetFavoriteCount(ctx, req.(*request.DouyinFavoriteCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Favorite_ServiceDesc is the grpc.ServiceDesc for Favorite service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Favorite_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Favorite",
	HandlerType: (*FavoriteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FavoriteVideo",
			Handler:    _Favorite_FavoriteVideo_Handler,
		},
		{
			MethodName: "GetFavoriteVideoList",
			Handler:    _Favorite_GetFavoriteVideoList_Handler,
		},
		{
			MethodName: "GetUserFavoriteVideoIdList",
			Handler:    _Favorite_GetUserFavoriteVideoIdList_Handler,
		},
		{
			MethodName: "GetUserListFavoriteVideoIdList",
			Handler:    _Favorite_GetUserListFavoriteVideoIdList_Handler,
		},
		{
			MethodName: "GetUserFavoritedCount",
			Handler:    _Favorite_GetUserFavoritedCount_Handler,
		},
		{
			MethodName: "GetFavoriteCount",
			Handler:    _Favorite_GetFavoriteCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "favorite/api/favorite.proto",
}
